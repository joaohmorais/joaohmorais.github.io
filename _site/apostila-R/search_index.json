[["apresentação.html", "Material de Apoio - Uso do R na Epidemiologia 1 Apresentação", " Material de Apoio - Uso do R na Epidemiologia João MoraisEscola Nacional de Saúde Pública Sergio Arouca Maio de 2024 1 Apresentação Esse material tem como objetivo servir de guia para o aprendizado do R durante as disciplinas e monitorias do programa de Epidemiologia em Saúde Pública da Escola Nacional de Saúde Pública Sergio Arouca (ENSP/Fiocruz). Este material reúne diversos tutoriais já apresentados em diferentes momentos do curso, como as disciplinas de Introdução à Epidemiologia e Estatística Aplicada a Epidemiologia. O material está dividido na forma de website interativo, onde pode-se navegar por seu conteúdo clicando nas abas ao lado. Divide-se o conteúdo na seguinte forma: Um capítulo de primeiros passos, que envolve o processo de instalação do R e do Rstudio, assim como familiarização com o ambiente; A aproximação do software R usando-o como calculadora; A introdução aos Objetos no R, como vetores, listas e data frames; Um capítulo focado na Importação de dados externos; E um breve tutorial sobre visualização de dados no R. "],["primeiros-passos.html", "2 Primeiros passos 2.1 Instalação do R 2.2 Instalação do RStudio (posit) 2.3 O RStudio 2.4 Pedindo ajuda no R", " 2 Primeiros passos Neste capítulo, vamos aprender como instalar o R nos principais sistemas operacionais: Windows, Linux e Mac. Também mostramos a configuração de seu principal ambiente de desenvolvimento: o RStudio. 2.1 Instalação do R 2.1.1 Instalação no Windows 2.1.1.1 Passo 1: Baixar o instalador Acesse a página do CRAN: CRAN R Project. Clique na opção “CRAN”, abaixo de “Download”. Escolha um servidor (mirror) mais próximo de você. Clique em “Download R for Windows”. Clique em “base” e depois em “Download R x.y.z for Windows” (onde x.y.z é a versão mais recente). 2.1.1.2 Passo 2: Executar o instalador Execute o arquivo baixado (R-x.y.z-win.exe). Siga as instruções do instalador. Recomendamos manter as configurações padrão. Após a conclusão, o R estará instalado no seu sistema. 2.1.2 Instalação no Linux Para diferentes distribuições Linux, os passos podem variar. Aqui vamos usar o Ubuntu como exemplo: Acesse a página do CRAN: CRAN R Project. Clique em “Download R for Linux”. Agora selecione a sua distribuição de sistema. Nesse caso, será a “Ubuntu”. Siga as instruções mostradas na página. 2.1.3 Instalação no MacOS 2.1.3.1 Passo 1: Baixar o instalador Acesse a página do CRAN: CRAN R Project. Clique na opção “CRAN”, abaixo de “Download”. Escolha um servidor (mirror) mais próximo de você. Clique em “Download R for (Mac) OS X.”. Clique em “base” e depois em selecione a versão mais recente. 2.1.3.2 Passo 2: Executar o instalador Execute o arquivo baixado (R-x.y.z.pkg). Siga as instruções do instalador. Recomendamos manter as configurações padrão. Após a conclusão, o R estará instalado no seu sistema. 2.2 Instalação do RStudio (posit) O RStudio é um Ambiente de Desenvolvimento Integrado (Integrated Development Environment - IDE), que auxilia a escrita de códigos e desenvolvimento de projetos em R. Para instalá-lo, acesse o website da Posit, na seção de Downloads: Downloads - RStudio; A partir daí, escolha o arquivo que corresponde ao seu sistema operacional (Windows, Linux, MacOS, …); Siga as instruções de instalação. 2.3 O RStudio Após instalar e abrir o RStudio, vê-se uma divisão em quatro quadrantes: A execução propriamente do código se dá no Console. É nele que podemos digitar os comandos e executá-los ao teclar “Enter”. Na mesma tela, o R exibirá o resultado dos seus comandos. A fim de organizar o código em forma de instruções e não perder seus comandos, utiliza-se a tela do editor. Nela é possível escrever uma sequência de instruções e executá-las uma por uma, com o comando “Ctrl+ENTER” sobre a linha desejada. O Output é onde serão exibidos gráficos e demais visualizações que solicitarmos ao R. Na tela superior direita, também consta o Environment, que é uma representação do ambiente de trabalho no R. Nele constarão todos os objetos salvos, valores e funções. 2.4 Pedindo ajuda no R Ao adentrar a jornada de aprendizado no R, é essencial saber diferentes formas de pedir ajuda para executar uma determinada tarefa ou ao encontrar algum erro. Quando a questão envolve uma função própria do R, podemos executar o comando ? nome da funcao. Por exemplo, se quisermos saber mais sobre a função subset no R: ?subset De forma complementar, fóruns conhecidos como StackOverflow, podem ser muito úteis. Muitos dos problemas que passamos já foram enfrentados por outras pessoas passando por situações parecidas. As soluções dos problemas são compartilhadas nesses fóruns e podemos reutilizá-las ou adaptá-las, como parte do processo de aprendizado. Mais recentemente, tecnologias de geração de linguagem natural como o ChatGPT têm ganhado protagonismo nessa tarefa. Embora seja extremamente útil e acessível em termos de linguagem, para problemas mais complexos podem ser fornecidas soluções não adequadas. "],["r-como-calculadora.html", "3 R Como Calculadora 3.1 Operadores matemáticos básicos 3.2 Funções matemáticas básicas 3.3 Guardando valores em objetos 3.4 Vetores: coleção de valores 3.5 Resumo", " 3 R Como Calculadora Uma das funções básicas do R pode ser sua utilização como um software para fazer contas. Pode-se realizar operações aritméticas simples ou calcular expressões mais complexas. Também é um bom exercício para treinar o uso das abas de Script e da aba do Console. 3.1 Operadores matemáticos básicos Os operadores matemáticos básicos são: + para soma; - para subtração; * para multiplicação; / para divisão; e ^ para exponenciação. Vamos treinar o uso dessas operações no R. Você pode digitar os comandos diretamente no Console para executá-los, ou usar o atalho CTRL+Enter sobre a linha do Script que se deseja executar. 2+2 #soma ## [1] 4 2-2 #subtração ## [1] 0 2*3 #multiplicação ## [1] 6 9/2 #divisão ## [1] 4.5 9%%2 #modulo x mod y ## [1] 1 2^5 #exponenciação ## [1] 32 Use parênteses para separar partes dos cálculos, por exemplo, para somar três numeros e dividir por 3 (tirar a média) (10 + 4.8 + 6.5)/3 ## [1] 7.1 Para fazer a conta 4+16, dividido por 4, elevado ao quadrado: ((4+16)/4)^2 ## [1] 25 Use ponto como decimal! 1.5 * 2.5 ## [1] 3.75 0.6 * 1.7 ## [1] 1.02 Muitas vezes o R mostra em notacao cientifica 1e3 # 1000 1e6 # 1000000 Pratique: Escreva contas que envolvam números inteiros e cada um dos operadores. Veja a importância de ficar de olho nos parênteses: 7.5 + 3.2 + 0.1 * 0.43 ## [1] 10.743 (7.5 + 3.2 + 0.1) * 0.43 ## [1] 4.644 7.5 + 3.2 + (0.1 * 0.43) ## [1] 10.743 O R adota as regras de precedências utilizadas na matemática: (primeiro multiplicação e divisão, depois adição e substração, etc.) Na dúvida, utilize parênteses para indicar a precedência das operações. Eles nunca são demais! 3.2 Funções matemáticas básicas Algumas operações matemáticas utilizam funções Toda função tem seu nome seguido de parênteses. Passaremos uma relacao das mais comuns aqui. Raiz quadrada: sqrt(numero) sqrt(16) ## [1] 4 sqrt(-16) # note que nao existe raiz quadrada de numero negativo. ## Warning in sqrt(-16): NaNs produzidos ## [1] NaN Juntando operações: sqrt(10 + 100) ## [1] 10.48809 sqrt(4.6^2) ## [1] 4.6 Exponencial: exp(numero) exp(3) ## [1] 20.08554 Logaritmo: log(numero) log(16) ## [1] 2.772589 log(-16) # nao existe log de numero negativo ou zero ## Warning in log(-16): NaNs produzidos ## [1] NaN log(0) ## [1] -Inf log(1000) ## [1] 6.907755 # logaritmo de base 10 log(100, base = 10) ## [1] 2 log(1000, base = 10) ## [1] 3 Módulo: abs(numero) abs(-12) ## [1] 12 3.3 Guardando valores em objetos Podemos usar o operador de atribuição (&lt;- ou =) para salvar números ou resultados de conta em objetos. Repare que eles ficam guardados na memória do R (janela “Global Environment” ao lado) # Guardando o valor 5.7 no objeto x (a gente fala &quot;x recebe o valor 5.7&quot;) x &lt;- 5.7 x ## [1] 5.7 # Guardando o valor 2.01 no objeto y y &lt;- 2.01 y ## [1] 2.01 # Guardando o resultado de uma conta no objeto z z &lt;- x+y z ## [1] 7.71 # Guardando o resultado de uma conta no objeto w w &lt;- z+20 # O R sobrescreve o conteúdo dos objetos (trocando o valor de x para 6) x ## [1] 5.7 x &lt;- 6 x ## [1] 6 # Letra maiuscula é diferente de minuscula A &lt;- 10.5 A ## [1] 10.5 a # o objeto a não existe ## [1] 1.5 3.3.1 Nomeando objetos Ao nomear objetos, é sempre importante usar nomes curtos e que façam sentido. Não use símbolos. Há um manifesto para boas práticas na criação de nomes de variáveis em R: Sintaxe - Tidyverse style guide peso &lt;- 72 altura &lt;- 1.65 imc &lt;- peso/(altura^2) imc ## [1] 26.44628 Podemos escolher o estilo de usar maiúsculas na segunda parte do nome: pesoAgora &lt;- 72 pesoAntes &lt;- 70 ganhoPeso &lt;- pesoAgora - pesoAntes Não podemos usar espaços, nem acentos. Mas podemos usar ponto ou _: peso.agora &lt;- 72 peso.antes &lt;- 70 ganho.peso &lt;- peso.agora - peso.antes Para apagar objetos, podemos usar a função rm(): rm(A) rm(w, x, y, z) 3.3.2 Exercício Pratique: Chame de A, o numero de alunos na turma (32), chame de P o numero de professores (5), e de E, o numero de estagiarios (2). Crie esses objetos. Calcule o número total de pessoas envolvidas no curso usando os objetos eguarde o resultado num objeto (com o nome que quiser) Calcule a razao entre o numero de professores e numero de alunos, e guarde num objeto Calcule a razao entre o numero de estagiarias e numero de alunos, e guarde num objeto 3.4 Vetores: coleção de valores No R é muito comum trabalhar com uma coleção de valores, as quais chamamos de vetores. Para criar um vetor no R, utilizamos o comando c(). Por exemplo: # por exemplo: seja v uma sequência de numeros v &lt;- c(1, 2.5, 3.6, -4, 0.5, 6, 6.7) v ## [1] 1.0 2.5 3.6 -4.0 0.5 6.0 6.7 Cada número tem uma posição dentro do vetor, indicada por seu índice. Podemos especificar o índice através dos colchetes []: v[1] # primeiro elemento ## [1] 1 v[2] # segundo elemento ## [1] 2.5 v[5] # quinto elemento ## [1] 0.5 Podemos fazer contas com esses elementos: v[2] + v[3] ## [1] 6.1 v[1] + v[5] + v[7] ## [1] 8.2 Ou podemos usar algumas funções prontas no R, que operam sobre esse conjunto de elementos: sum(v) ## [1] 16.3 min(v) ## [1] -4 max(v) ## [1] 6.7 mean(v) # media ## [1] 2.328571 median(v) # mediana ## [1] 2.5 var(v) # variancia ## [1] 13.23238 sd(v) # desvio padrao (standard deviation) ## [1] 3.637634 3.4.1 Exercício Pratique: Uma cidade registrou a seguinte sequencia de casos suspeitos de dengue (por semana): 2, 6, 10, 8, 13, 21, 18, 9, 3, 1, 0. Coloque os números em um vetor e calcule: o total de casos. o valor máximo de casos numa semana; o valor mínimo de casos numa semana; o número médio de casos por semana; o total de casos nas primeiras 3 semanas. Visite a pagina da Wikipédia com o clima de São Joaquim (SC). Faça um vetor com a temperatura mínima media por mês e: Calcule a média da temperatura mínima no ano (média dos valores mensais); Encontre o valor mínimo; Encontre o valor máximo. 3.4.2 Tipos especiais de vetores O R possui alguns atalhos que facilitam a criação de vetores, como criação de sequências, por exemplo. Observe: # use : para criar uma sequencia de numeros inteiros 1:10 # significa 1 a 10 ## [1] 1 2 3 4 5 6 7 8 9 10 y &lt;- -4:20 # -4 a 20 y ## [1] -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 z &lt;- 20:100 # 20 a 100 z ## [1] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 ## [48] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 z.inv &lt;- 100:20 # 100 a 20, sequencia decrescente z.inv ## [1] 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 ## [48] 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 3.4.3 Subconjuntos de vetores É frequente a necessidade de realizar cortes em um vetor, acessando-o na forma de subconjuntos. Para isso, basta indicarmos o intervalo desejado dentro de colchetes: v &lt;- c(10, 2, 43, 0, 21, 5, 12, 55, -5, 3.2, 54, 1.1) Verificando o tamanho do vetor: length(v) ## [1] 12 Quais os elementos nas posições 1 a 3? v[1:3] # assim é bem mais facil do que o jeito abaixo ## [1] 10 2 43 v[c(1,2,3)] ## [1] 10 2 43 Pratique: quais os valores nas posicoes 8 a 12? quais os valores nas posicoes 4 a 10? qual a soma dos valores nas posições 1 a 5? qual a média de todos os valores? qual a média dos valores nas posicoes 6 a 12? qual a média dos valores nas posicoes 1 a 6? Volte ao exercicio da temperatura em Sao Joaquim. Qual é a média de temperatura nos meses de inverno (junho a setembro)? Qual é a média da temperatura nos meses de verão? 3.5 Resumo Agora você domina as operações e manipulações mais fundamentais do R! O R é uma linguagem pensada para ser trabalhada de forma vetorial, ou seja, executando operações sobre vetores (coleções) de dados. Assim, é muito útil ter essas funções bem praticadas, pois seu uso será constante. Na próxima seção, vamos trabalhar com o conceito de objetos no R. "],["objetos-no-r.html", "4 Objetos no R 4.1 Classes dos objetos 4.2 Convertendo classes 4.3 Juntando elementos 4.4 Operações com vetores 4.5 Listas: Juntando elementos diferentes 4.6 Data frames", " 4 Objetos no R O R é uma linguagem baseada em objetos, ou seja, quer dizer que tudo o que for usado no R está guardado na memória do computador sob a forma de um objeto. Todos os objetos em R tem uma classe associada, como: vetores, matrizes, data frames, list, numeric, listas, funções, expressões e muitos outras. Para armazenar algum valor (ou texto) em um objeto pode ser usado simbolo de atribuicao &lt;- ou o simbolo de igualdade =. Preferencialmente usamos &lt;-. Podemos verificar os objetos guardados no “Environment” do R. O “Environment” é uma aba que fica na janela do canto superior direito. 4.1 Classes dos objetos Todo objeto tem uma classe, que define como o R o enxerga e como trata o objeto. O comportamento das funcoes do R podem ser bem diferentes de acordo com a classe do objeto. É possível verificar a classe do objeto com a função class(). 4.1.1 numeric Os objetos de classe \"numeric\" são números reais: a &lt;- 1.5 b &lt;- 3.1 class(a) ## [1] &quot;numeric&quot; class(b) ## [1] &quot;numeric&quot; a + b ## [1] 4.6 4.1.2 character Os objetos de classe \"Character\" são textos, indicados por aspas. a &lt;- &quot;1.5&quot; b &lt;- &quot;3.1&quot; # sempre entre aspas class(a) ## [1] &quot;character&quot; class(b) ## [1] &quot;character&quot; a + b # o R nao sabe somar textos ## Error in a + b: argumento não-numérico para operador binário # o texto, ou string em ingles, pode ser longo nome1 &lt;- &quot;João da Silva&quot; nome2 &lt;- &quot;Cruz&quot; class(nome1) ## [1] &quot;character&quot; class(nome2) ## [1] &quot;character&quot; Para juntar dois textos, podemos usar a função paste(): nome &lt;- paste(nome1, nome2) nome ## [1] &quot;João da Silva Cruz&quot; 4.1.3 Date Muitas vezes precisamos guardar datas. Nesse caso, a classe mais comum é Date. Como há muitas formas de escrever uma data, precisa explicar para o R seu formato. Fazemos isso indicando, através de uma string, quem é o dia, o mês e o ano: d &lt;- as.Date(&quot;01/10/2022&quot;, format = &quot;%d/%m/%Y&quot;) class(d) ## [1] &quot;Date&quot; d ## [1] &quot;2022-10-01&quot; Podemos somar dias: d + 5 ## [1] &quot;2022-10-06&quot; d + c(5,10,20) ## [1] &quot;2022-10-06&quot; &quot;2022-10-11&quot; &quot;2022-10-21&quot; d + 1:10 ## [1] &quot;2022-10-02&quot; &quot;2022-10-03&quot; &quot;2022-10-04&quot; &quot;2022-10-05&quot; &quot;2022-10-06&quot; &quot;2022-10-07&quot; &quot;2022-10-08&quot; &quot;2022-10-09&quot; &quot;2022-10-10&quot; &quot;2022-10-11&quot; Note que todos os objetos acima tem apenas um elemento: length(a) ## [1] 1 length(b) ## [1] 1 length(d) ## [1] 1 length(nome) ## [1] 1 4.1.4 Exercícios Crie objetos do tipo character, um para cada um de seus nomes. Agora concatene os seus nomes usando paste() Faça uma sequência de datas que comece em 1 de janeiro de 2023 a 30 de janeiro de 2023. 4.2 Convertendo classes Em algumas situações, acontece do R importar um objeto com a classe errada e precisarmos converter. Pode ser que ele entende que é um character, mas é um número, ou uma data. As funções de conversão geralmente começam com as., como: as.numeric(), as.Date(), as.character(): # O exemplo é o mesmo mostrado acima a &lt;- &quot;1.5&quot; b &lt;- &quot;3.1&quot; # sempre entre aspas class(a) ## [1] &quot;character&quot; class(b) ## [1] &quot;character&quot; a + b # o R ## Error in a + b: argumento não-numérico para operador binário Vamos transformar esses objetos do tipo character() em número, usando a funçãa as.numeric(): a &lt;- as.numeric(a) class(a) ## [1] &quot;numeric&quot; b &lt;- as.numeric(b) class(b) ## [1] &quot;numeric&quot; a + b ## [1] 4.6 4.3 Juntando elementos Os vetores são sequencias de valores. O modo mais simples de criar um vetor é utilizar a função de concatenação c(), como fizemos, separando os elementos que formam o vetor por vírgula. Por exemplo, criar um vetor de tamanho 4, contendo os valores (0.5, 7.2, -1, 6): n &lt;- c(0.5, 7.2, -1, 6) class(n) ## [1] &quot;numeric&quot; length(n) ## [1] 4 n ## [1] 0.5 7.2 -1.0 6.0 Vetor de objetos character (texto): se &lt;- c(&quot;feminino&quot;, &quot;masculino&quot;) class(se) ## [1] &quot;character&quot; length(se) ## [1] 2 se ## [1] &quot;feminino&quot; &quot;masculino&quot; Vetor de datas: d1 &lt;- as.Date(c(&quot;01/10/2022&quot;, &quot;01/11/2022&quot;), format = &quot;%d/%m/%Y&quot;) class(d1) ## [1] &quot;Date&quot; length(d1) ## [1] 2 d1 ## [1] &quot;2022-10-01&quot; &quot;2022-11-01&quot; E podemos juntar elementos de tipos diferentes? R: Até podemos sim, mas serão convertidos para um formato em comum! Observe: xx &lt;- c(1, &quot;a&quot;) xx ## [1] &quot;1&quot; &quot;a&quot; class(xx) ## [1] &quot;character&quot; Viu só? O R convertou tudo para character(). 4.4 Operações com vetores Além das operações que podemos executar sobre os vetores (mean(), sum(), min(), max()) que vimos no capítulo anterior, podemos executar operações entre vetores diferentes. Suponha, por exemplo, que você mediu peso e altura de cinco pessoas: peso &lt;- c(54, 65, 68, 70, 76) altura &lt;- c(1.50, 1.55, 1.54, 1.61, 1.60) Experimente: calcule o IMC das cinco pessoas (peso/altura^2). 4.4.1 Indexação dos vetores Os elementos de um vetor podem ser acessados por meio de um índice. Para poder acessar os valores, coloca-se o nome do vetor seguido de colchetes [], e dentro do colchete um numero que indica a posição do elemento que se quer acessar. Assim, se quiséssemos acessar o 3 elemento do vetor peso usaríamos peso[3]. peso[3] ## [1] 68 altura[3] ## [1] 1.54 peso[3]/altura[3]^2 ## [1] 28.67263 4.5 Listas: Juntando elementos diferentes No R, não podemos armazenar objetos de tipos diferentes em vetores. Mas isso é possível utilizando uma estrutura mais flexível, chamada de lista: # List registro &lt;- list(sexo = &quot;feminino&quot;, idade = 20, pesos = c(43, 45, 42)) registro ## $sexo ## [1] &quot;feminino&quot; ## ## $idade ## [1] 20 ## ## $pesos ## [1] 43 45 42 class(registro) ## [1] &quot;list&quot; length(registro) # numero de elementos da lista ## [1] 3 Para acessar elementos da lista, usamos o $: # Para acessar os elementos da lista, use $ registro$sexo ## [1] &quot;feminino&quot; class(registro$sexo) ## [1] &quot;character&quot; 4.6 Data frames Os data frames são os equivalentes a uma tabela no R, e são mais úteis para guardar os dados. Ao importarmos bancos de dados para o R, geralmente estes são salvos em objetos do tipo data.frame. Vamos criar um data frame para guardar dados de cinco pessoas: id &lt;- c(1,2,3,4,5) # numero identificador da pessoa, variavel numerica sexo &lt;- c(&quot;F&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;) # sexo : variavel tipo character peso &lt;- c(54, 65, 68, 70, 76) altura &lt;- c(1.50, 1.55, 1.54, 1.61, 1.60) Agora vamos colocar todos em um data.frame: #vamos colocar todos em um data.frame dados &lt;- data.frame(id, sexo, peso, altura) dados ## id sexo peso altura ## 1 1 F 54 1.50 ## 2 2 M 65 1.55 ## 3 3 F 68 1.54 ## 4 4 F 70 1.61 ## 5 5 M 76 1.60 class(dados) ## [1] &quot;data.frame&quot; Agora note que temos as variáveis nas colunas e os registros (as pessoas) nas linhas. Isso é muito importante. No R, esse é um dos padrões de formato mais utilizados. Para acessar ou extrair uma coluna específica, usamos novamente o operador $: dados$peso ## [1] 54 65 68 70 76 dados$altura ## [1] 1.50 1.55 1.54 1.61 1.60 De forma semelhante, podemos criar uma nova variável no data.frame: dados$idade &lt;- c(25, 33, 19, 43, 29) dados ## id sexo peso altura idade ## 1 1 F 54 1.50 25 ## 2 2 M 65 1.55 33 ## 3 3 F 68 1.54 19 ## 4 4 F 70 1.61 43 ## 5 5 M 76 1.60 29 Podemos, inclusive, criar variáveis fazendo contas com as existentes! dados$imc &lt;- dados$peso/dados$altura^2 dados ## id sexo peso altura idade imc ## 1 1 F 54 1.50 25 24.00000 ## 2 2 M 65 1.55 33 27.05515 ## 3 3 F 68 1.54 19 28.67263 ## 4 4 F 70 1.61 43 27.00513 ## 5 5 M 76 1.60 29 29.68750 Exercício: crie uma nova coluna com a altura em cm (multiplique por 100). 4.6.1 Funções úteis para data frames A função summary() faz um compilado das medidas resumo das colunas do nosso data.frame: summary(dados) ## id sexo peso altura idade imc ## Min. :1 Length:5 Min. :54.0 Min. :1.50 Min. :19.0 Min. :24.00 ## 1st Qu.:2 Class :character 1st Qu.:65.0 1st Qu.:1.54 1st Qu.:25.0 1st Qu.:27.01 ## Median :3 Mode :character Median :68.0 Median :1.55 Median :29.0 Median :27.06 ## Mean :3 Mean :66.6 Mean :1.56 Mean :29.8 Mean :27.28 ## 3rd Qu.:4 3rd Qu.:70.0 3rd Qu.:1.60 3rd Qu.:33.0 3rd Qu.:28.67 ## Max. :5 Max. :76.0 Max. :1.61 Max. :43.0 Max. :29.69 A função plot() também é muito útil, e não só para data frames. plot(dados) Qual o tamanho do data.frame? # o dataframe tem dimensao dim(dados) ## [1] 5 6 O data frame possui 5 linhas e 6 colunas. 4.6.2 Filtros Podemos filtrar um dataframe utilizando a função subset() e especificando a condição: # para extrair os dados das mulheres: dadosF &lt;- subset(dados, sexo == &quot;F&quot;) # note que estamos usando == pq é uma comparacao dadosF ## id sexo peso altura idade imc ## 1 1 F 54 1.50 25 24.00000 ## 3 3 F 68 1.54 19 28.67263 ## 4 4 F 70 1.61 43 27.00513 # para extrair os dados das pessoas com pelo menos 1,6m: dadosa &lt;- subset(dados, altura &gt;= 1.6) dadosa ## id sexo peso altura idade imc ## 4 4 F 70 1.61 43 27.00513 ## 5 5 M 76 1.60 29 29.68750 # para extrair os dados das pessoas mulheres pelo menos 1,6m: dadosaF &lt;- subset(dados, altura &gt;= 1.6 &amp; sexo == &quot;F&quot;) # note que estamos usando == pq é uma comparacao dadosaF ## id sexo peso altura idade imc ## 4 4 F 70 1.61 43 27.00513 Podemos filtrar também utilizando os índices de linha e coluna dentro dos colchetes: [linha,coluna]: # a altura do terceiro individuo dados$altura[3] ## [1] 1.54 #OU dados[3,4] # elemento da linha 3, coluna 4 ## [1] 1.54 # altura dos primeiros 3 individuos dados$altura[1:3] ## [1] 1.50 1.55 1.54 # OU dados[1:3, 4] # linha 1 a 3 da coluna 4 ## [1] 1.50 1.55 1.54 4.6.3 Filtros com condições lógicas Outra forma de fazer filtros no data frame é através de condições lógicas. Geralmente utiliza algum operador lógico, como &gt;=, &gt;, == (não somente =, pois esse é para atribuição), &lt;=, != (diferente). Observe: Retornando somente os dados de pessoas com mais de 1.60: dados[dados$altura &gt; 1.6,] ## id sexo peso altura idade imc ## 4 4 F 70 1.61 43 27.00513 Somente pessoas do sexo masculino: dados[dados$sexo == &quot;M&quot;,] ## id sexo peso altura idade imc ## 2 2 M 65 1.55 33 27.05515 ## 5 5 M 76 1.60 29 29.68750 Pessoas com idade &gt; 30: dados[dados$idade &gt; 30,] ## id sexo peso altura idade imc ## 2 2 M 65 1.55 33 27.05515 ## 4 4 F 70 1.61 43 27.00513 "],["importando-dados.html", "5 Importando dados 5.1 Caminhos 5.2 Projetos 5.3 Lendo Arquivos 5.4 Pacote {readr}", " 5 Importando dados Uma tarefa importante na rotina de análise de dados no R é a importação adequada de nossos dados para o ambiente de trabalho. Essa etapa pode ser simples, mas também pode exigir a definição de alguns parâmetros mais específicos que podem depender do banco, ou do sistema operacional. 5.1 Caminhos Para toda tarefa de importação é importante definirmos o caminho dos arquivos, ou seja, o local no computador onde estão os dados. Podemos especificar esse caminho de duas formas: Caminho absoluto: Mostra a localização do arquivo desde a pasta primária do computador. Independente de onde seja seu working directory no R, você conseguirá acessar esse arquivo utilizando o caminho absoluto. Geralmente são do tipo: C:/Usuarios/... (Windows), ou home/usuario/... (Linux), ou seja, especificam a localização desde as partições mais básicas. Contudo, não recomenda-se a utilização de caminhos absolutos pois serão sempre dependentes da sua máquina e sua organização, ou seja, o código não fica reprodutível. O caminho relativo já é dependente do working directory no R, que é onde você está trabalhando no momento. Todo caminho relativo irá partir dele. Você pode descobrir seu local de trabalho (working directory) no R através da função getwd(): getwd() ## [1] &quot;/home/joaomorais/Documentos/Outros/monitoria-livro-R&quot; Ou seja, se você quiser acessar um arquivo que está na mesma pasta que seu local de trabalho, basta utilizar o nome do arquivo. De forma complementar, podemos alterar o ambiente de trabalho com a função setwd(): # mudando o diretório para a pasta &quot;IntroEpi24&quot;: setwd(&quot;/home/joaomorais/Documentos/Outros/IntroEpi24/&quot;) A partir daí, o R enxergará naturalmente todos os arquivos dentro dessa pasta. Uma forma de verificar o que o R está “enxergando” é através do comando dir(): dir() ## [1] &quot;Tutorial 1 - Calculadora.R&quot; 5.2 Projetos Uma boa prática em termos de reprodutibilidade e portabilidade dos trabalhos feitos em R é a utilização de Projetos. Ao criar um Projeto no R, ele localiza-se dentro de uma pasta onde ficam organizados todos os arquivos comumente utilizados para as funções daquele projeto. Isso facilita muito o compartilhamento de trabalhos, pois os caminhos existentes a partir da pasta do projeto serão comum para todos. 5.3 Lendo Arquivos O pacote R tem nativo diversas funções para leitura de arquivos e carregamento para o ambiente de trabalho, as quais geralmente se iniciam com read.*(), ou seja: read.csv(), read.table(), etc. Basta passar o caminho para o arquivo na função. Vamos supor que temos um arquivo chamado exemplo.csv na pasta de nosso projeto, e iremos importá-lo: exemplo &lt;- read.csv(&quot;exemplo.csv&quot;) exemplo ## ID sexo idade peso altura ## 1 1 M 41 92.7 1.74 ## 2 2 F 52 71.9 1.73 ## 3 3 F 49 38.5 1.50 ## 4 4 F 21 66.1 1.67 ## 5 5 M 68 49.3 1.57 ## 6 6 M 48 51.5 1.51 ## 7 7 F 37 77.6 1.54 ## 8 8 M 52 67.1 1.88 ## 9 9 F 31 16.9 1.89 ## 10 10 M 35 29.6 1.76 ## 11 11 M 37 55.8 1.61 ## 12 12 M 55 76.3 1.76 ## 13 13 M 54 73.5 1.44 ## 14 14 M 34 69.5 1.53 ## 15 15 M 62 58.9 1.46 ## 16 16 M 60 19.5 1.76 ## 17 17 M 42 75.5 1.35 Pode ser que na importação o R não reconheça as colunas de forma adequada, e um problema comum é e a especificação do delimitador utilizado no csv. O arquivo csv pode ser separado por vírgulas, ponto e vírgula, tabulações, etc. Podemos especificar o delimitador com o argumento sep: exemplo2 &lt;- read.csv(&quot;exemplo.csv&quot;, sep = &quot;;&quot;) A função read.csv2() é adaptada a sistemas que utilizam vírgula como separador decimal e portanto o ponto e vírgula como separador do arquivo .csv. Dessa forma, acaba sendo mais útil para muitos arquivos gerados no Brasil. # ja usa por padrao o separador ponto e virgula exemplo2 &lt;- read.csv2(&quot;exemplo.csv&quot;) 5.4 Pacote {readr} O pacote readr possui funções semelhantes às vistas anteriormente, mas com funcionalidades úteis para checar a estrutura dos dados ao importá-los: library(readr) exemplo &lt;- read_csv(&quot;exemplo.csv&quot;) ## Rows: 17 Columns: 5 ## ── Column specification ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): sexo ## dbl (4): ID, idade, peso, altura ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Perceba que a saída do comando já fornece informações úteis sobre o tipo dos dados (quais colunas são texto, ou numéricas), assim como o número de linhas e colunas importados, o que facilita a verificação de possíveis erros na leitura dos dados. "],["visualização-de-dados.html", "6 Visualização de dados 6.1 Gerando um conjunto de dados de exemplo 6.2 Gráficos com R base 6.3 Introdução ao {ggplot2}", " 6 Visualização de dados A visualização é uma tarefa fundamental em todo o processo de análise de dados, desde a análise exploratória, onde compreendemos o banco e retiramos os primeiros insights, até etapas mais avançadas de modelagem e validação de resultados. Para auxiliar na tarefa de gerar visualizações no R, vamos primeiro gerar, aleatoriamente, um conjunto de dados de exemplo. Vamos utilizar as funções rnorm(), para geração de números aleatórios, e sample(), para amostrar também aleatoriamente de um conjunto de valores possíveis. Usamos a função set.seed() apenas para garantir a reprodutibilidade dos resultados. 6.1 Gerando um conjunto de dados de exemplo set.seed(123) dados &lt;- data.frame( id = 1:100, idade = round(rnorm(100, mean=42, sd=18)), sexo = sample(c(&quot;Masculino&quot;, &quot;Feminino&quot;), 100, replace = TRUE), pressao_sistolica = rnorm(100, 120, 15), pressao_diastolica = rnorm(100, 80, 10), colesterol = rnorm(100, 200, 30) ) head(dados) ## id idade sexo pressao_sistolica pressao_diastolica colesterol ## 1 1 32 Feminino 131.8161 76.24397 230.4483 ## 2 2 38 Feminino 131.5356 74.38124 140.2175 ## 3 3 70 Feminino 124.9830 76.56083 187.1816 ## 4 4 43 Masculino 104.8744 80.90497 203.4991 ## 5 5 44 Feminino 118.2082 95.98509 173.2038 ## 6 6 73 Feminino 115.7941 79.11435 210.0171 6.2 Gráficos com R base O R por si já possui diversas funcionalidades para geração e customização de visualizações. Vamos explorar algumas delas. 6.2.1 Histogramas Os histogramas são úteis para visualização da distribuição de uma variável contínua. Aqui, vamos olhar a distribuição da idade: hist(dados$idade) Podemos melhorar a nossa visualização ao especificar parâmetros de customização à função: hist(dados$idade, main = &quot;Distribuição de Idade&quot;, xlab = &quot;Idade&quot;, ylab = &quot;Frequência&quot;, col = &quot;deepskyblue&quot;, border = &quot;black&quot;) 6.2.2 Gráficos de barras Utilizados majoritariamente para variáveis categóricas, os gráficos de barras são úteis para mostrar a frequência, absoluta ou relativa, ou alguma outra métrica em cada categoria: tab &lt;- table(dados$sexo) barplot(tab, main = &quot;Distribuição por Sexo&quot;, col = c(&quot;green4&quot;, &quot;purple4&quot;), xlab = &quot;Sexo&quot;, ylab = &quot;Contagem&quot;) 6.2.3 Gráficos de Dispersão Gráficos de dispersão (scatterplots) são úteis para analisar possíveis relações entre duas variáveis contínuas. Vamos utilizar nossos dados aleatórios de pressão sistólica e diastólica. plot(dados$pressao_sistolica, dados$pressao_diastolica, main = &quot;Relação entre Pressão Sistólica e Diastólica&quot;, xlab = &quot;Pressão Sistólica&quot;, ylab = &quot;Pressão Diastólica&quot;, pch = 19, col = &quot;blue&quot;) 6.2.4 Boxplots Por fim, os boxplots são frequentemente usados para analisar a distribuição de uma variável contínua. Um boxplot, ou diagrama de caixa, é uma representação gráfica que resume a distribuição de um conjunto de dados. Ele mostra a mediana, quartis, e possíveis valores atípicos de uma variável contínua. A caixa formada no gráfico representa o intervalo interquartil (IQR), que é a diferença entre o primeiro quartil (Q1, o 25º percentil) e o terceiro quartil (Q3, o 75º percentil) da variável. A linha dentro da caixa representa a mediana. Os “bigodes” estendem-se dos quartis até o valor mais extremo que não é considerado um outlier (distância calculada tipicamente como sendo 1,5 vezes o IQR). Os outliers, portanto, são pontos que estão além dos bigodes, representando observações mais extremas, ou aberrantes, e são plotados no gráfico como pontos individuais. Vamos gerar os boxplots da pressão sistólica de acordo com sexo: boxplot(pressao_sistolica ~ sexo, data = dados, main = &quot;Pressão Sistólica por Sexo&quot;, xlab = &quot;Sexo&quot;, ylab = &quot;Pressão Sistólica&quot;, col = c(&quot;green4&quot;, &quot;purple4&quot;)) 6.3 Introdução ao {ggplot2} O ggplot2 é um dos pacotes mais utilizados no R e introduz uma nova gramática de composição de gráficos. Ele possui uma infinidade de possibilidades de customização e geração de todo tipo de gráfico. Muitos estão disponíveis através de extensões desenvolvidas do próprio pacote. Todo gráfico ggplot inicia-se com um comando ggplot(), onde usualmente informa-se a base de dados com que se irá desenvolver o gráfico. A lógica passa pela especificação do componente de estéticas (aes()), que mapeará cada variável para um componente específica do gráfico, por exemplo: Idade no eixo x, pressão no eixo y, e sexo como cor dos pontos no gráfico. Vamos ver como ficaria esse exemplo: library(ggplot2) ggplot(dados, #especificando a base de dados aes( # informando as estéticas x = idade, # idade no eixo x y = pressao_sistolica, # pressao sistolica no eixo y color = sexo # sexo nas cores do gráfico )) + geom_point() # indica que se deseja um gráfico de pontos Viu só? Essa é a lógica básica de todos os gráficos ggplot. Pode-se especificar estéticas específicas para cada componente do gráfico, como geom_point(), geom_line(), geom_boxplot()… Para mais exemplos de gráficos em ggplot, recomenda-se o material de visualização do curso de Ciência de Dados do Curso-R. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
